package com.sepnotican.agi.core.form.generic;

import com.sepnotican.agi.core.annotations.Synonym;
import com.sepnotican.agi.core.form.IFormHandler;
import com.sepnotican.agi.core.utils.UIOrderComparator;
import com.vaadin.data.Binder;
import com.vaadin.data.HasValue;
import com.vaadin.icons.VaadinIcons;
import com.vaadin.ui.*;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.data.jpa.repository.JpaRepository;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

@org.springframework.stereotype.Component
@Scope("prototype")
public class AbstractElementForm<T> extends VerticalLayout {

    @Value("${agi.forms.element.save}")
    protected String BTN_SAVE_TEXT;
    @Value("${agi.forms.element.reload}")
    protected String BTN_RELOAD_TEXT;
    @Autowired
    private Logger logger;
    @Autowired
    GenericFieldGenerator fieldGenerator;
    @Autowired
    private ApplicationContext context;

    protected T entity;
    protected Binder<T> binder;
    protected Layout defaultControlPanel;
    protected IFormHandler formHandler;
    protected String formCachedName;

    private JpaRepository<T, Object> repository;

    public AbstractElementForm(IFormHandler formHandler, JpaRepository<T, Object> repository) {
        this.repository = repository;
        this.formHandler = formHandler;
    }

    public void init(T entity, boolean isNewInstance, String formCachedName) {
        this.formCachedName = formCachedName;
        removeAllComponents();

        this.entity = entity;
        binder = new Binder(entity.getClass());

        initDefaultControlPanel(binder);

        Class clazz = entity.getClass();
        Field[] fieldsArray = clazz.getDeclaredFields();
        ArrayList<Field> fieldArrayList = createOrderedElementsList(fieldsArray);

        for (Field field : fieldArrayList) {

            Component component = fieldGenerator.getComponentByFieldAndBind(field, binder);

            if (component == null) continue;

            if (field.isAnnotationPresent(javax.persistence.Id.class))
                ((HasValue) component).setReadOnly(true);

            makeUpCaptionForField(field, component);
            addComponent(component);
            component.setWidth(40f, Unit.PERCENTAGE);
        }
        binder.bindInstanceFields(entity);
        if (!isNewInstance) binder.readBean(entity);
    }

    protected ArrayList<Field> createOrderedElementsList(Field[] fieldsArray) {
        return Arrays.stream(fieldsArray)
                .sorted(new UIOrderComparator()).collect(Collectors.toCollection(ArrayList::new));
    }

    protected void initDefaultControlPanel(Binder<T> binder) {
        defaultControlPanel = new HorizontalLayout();
        MenuBar menuBar = new MenuBar();
        createSaveButton(binder, menuBar);
        createReloadButton(binder, menuBar);
        defaultControlPanel.addComponent(menuBar);
        addComponent(defaultControlPanel);
    }

    protected void createReloadButton(Binder<T> binder, MenuBar menuBar) {
        menuBar.addItem(BTN_RELOAD_TEXT,
                VaadinIcons.REFRESH,
                event -> binder.readBean(entity));
    }

    protected void createSaveButton(Binder<T> binder, MenuBar menuBar) {
        menuBar.addItem(BTN_SAVE_TEXT,
                VaadinIcons.CHECK,
                event -> {
                    try {
                        binder.writeBean(entity);
                        repository.save(entity);
                        binder.readBean(entity); //reload autogenerated fields
                        formHandler.refreshElementCaption(entity, formCachedName);
                    } catch (Exception e) {
                        Notification.show("Error", "Error while saving element", Notification.Type.ERROR_MESSAGE);
                        logger.error("Error while saving element: " + entity.getClass().getCanonicalName());
                    }
                });
    }

    protected void makeUpCaptionForField(Field field, Component component) {
        if (field.isAnnotationPresent(Synonym.class)) {
            component.setCaption(field.getAnnotation(Synonym.class).value());
        } else component.setCaption(field.getName());
    }


}
